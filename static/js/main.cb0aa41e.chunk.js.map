{"version":3,"sources":["tools/Text2Speech.js","App.js","serviceWorker.js","index.js"],"names":["Text2Speech","Object","classCallCheck","this","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","onend","console","log","onerror","error","pitch","rate","volume","voice","getVoices","find","name","text","speaking","speak","App","_this","possibleConstructorReturn","getPrototypeOf","call","loadVocab","asyncToGenerator","regenerator_default","a","mark","_callee","uri","options","wrap","_context","prev","next","document","location","href","json","rp","vocab","sent","abrupt","stop","loadModel","_callee2","loadedModel","_context2","tf","process","setState","model","calculate","_ref3","_callee3","data","tensorBuffer","words","wordIndex","_context3","initData","state","buffer","split","forEach","value","hasOwnProperty","set","predict","toTensor","_x","apply","arguments","onChangeText","event","target","text2Speech","toLowerCase","renderScore","score","Math","round","ScoreList","_ref4","react_default","createElement","className","Promise","all","then","reason","type","onBlur","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kZAyBeA,qBAxBb,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACbG,KAAKC,MAAQC,OAAOC,gBACpBH,KAAKI,UAAY,IAAIC,yBACrBL,KAAKI,UAAUE,MAAQ,kBAAMC,QAAQC,IAAI,sBACzCR,KAAKI,UAAUK,QAAU,kBAAMF,QAAQG,MAAM,mBAC7CV,KAAKI,UAAUO,MAAQ,EACvBX,KAAKI,UAAUQ,KAAO,EACtBZ,KAAKI,UAAUS,OAAS,EACxBb,KAAKI,UAAUU,MAAQd,KAAKC,MAAMc,YAAYC,KAAK,SAACF,GAAD,MAA0B,SAAfA,EAAMG,yDAGhEC,GACAlB,KAAKC,MAAMkB,SACbZ,QAAQG,MAAM,4BAGXQ,IAGLlB,KAAKI,UAAUc,KAAOA,EACtBlB,KAAKC,MAAMmB,MAAMpB,KAAKI,+BC+FXiB,cA7Gb,SAAAA,IAAc,IAAAC,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACZC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAuB,GAAAI,KAAAzB,QA8BF0B,UA/Bc5B,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KA+BF,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACNL,EAAMM,SAASC,SAASC,KAAO,cAE/BP,EAAU,CACZD,IAAKA,EACLS,MAAM,GALEN,EAAAE,KAAA,EAQSK,MAAOT,GARhB,cAQVX,EAAKqB,MARKR,EAAAS,KAAAT,EAAAU,OAAA,kCAAAV,EAAAW,SAAAf,EAAA/B,SA/BEsB,EA4CdyB,UA5CcjD,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KA4CF,SAAAkB,IAAA,IAAAC,EAAA,OAAArB,EAAAC,EAAAK,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAb,KAAA,EACcc,IAAaC,uBAD3B,cACNH,EADMC,EAAAN,KAEVtB,EAAK+B,SAAS,CAACC,MAAOL,IAFZC,EAAAL,OAAA,kCAAAK,EAAAJ,SAAAE,EAAAhD,SA5CEsB,EAmDdiC,UAnDc,eAAAC,EAAA1D,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KAmDF,SAAA2B,EAAOvC,GAAP,IAAAwC,EAAAC,EAAAC,EAAAC,EAAA,OAAAjC,EAAAC,EAAAK,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,UACNqB,EAAOpC,EAAKyC,UAEZ7C,IAAQI,EAAK0C,MAAMV,MAHb,CAAAQ,EAAAzB,KAAA,eAIJsB,EAAeR,IAAS,CAAC,EAAG,MAAMc,SAElCL,EAAQ1C,EAAKgD,MAAM,KACnBL,EAAY,EAChBD,EAAMO,QAAQ,SAACC,GACT9C,EAAKqB,MAAM0B,eAAeD,KAC5BT,EAAaW,IAAIhD,EAAKqB,MAAMyB,GAAQ,EAAGP,GACvCA,OAXIC,EAAAzB,KAAA,EAeKf,EAAK0C,MAAMV,MAAMiB,QAAQZ,EAAaa,YAAYd,OAfvD,OAeRA,EAfQI,EAAAlB,KAAA,OAkBVtB,EAAK+B,SAAS,CAACK,SAlBL,yBAAAI,EAAAhB,SAAAW,EAAAzD,SAnDE,gBAAAyE,GAAA,OAAAjB,EAAAkB,MAAA1E,KAAA2E,YAAA,GAAArD,EAwEdsD,aAAe,SAACC,GACd,IAAI3D,EAAO2D,EAAMC,OAAOV,MACxB9C,EAAK+B,SAAS,CAACnC,SAEXA,IACFI,EAAKyD,YAAY3D,MAAMF,GACvBI,EAAKiC,UAAUrC,EAAK8D,iBA9EV1D,EAkFd2D,YAAc,SAACC,GACb,OAAQC,KAAKC,MAAc,IAARF,GAAgB,GAAM,KAnF7B5D,EAsFd+D,UAAY,SAAAC,GAAY,IAAV5B,EAAU4B,EAAV5B,KACZ,OACE6B,EAAA1D,EAAA2D,cAAA,OAAKC,UAAU,WACbF,EAAA1D,EAAA2D,cAAA,WAAKD,EAAA1D,EAAA2D,cAAA,qBAAalE,EAAK2D,YAAYvB,EAAK,MACxC6B,EAAA1D,EAAA2D,cAAA,WAAKD,EAAA1D,EAAA2D,cAAA,4BAAoBlE,EAAK2D,YAAYvB,EAAK,MAC/C6B,EAAA1D,EAAA2D,cAAA,WAAKD,EAAA1D,EAAA2D,cAAA,uBAAelE,EAAK2D,YAAYvB,EAAK,MAC1C6B,EAAA1D,EAAA2D,cAAA,WAAKD,EAAA1D,EAAA2D,cAAA,sBAAclE,EAAK2D,YAAYvB,EAAK,MACzC6B,EAAA1D,EAAA2D,cAAA,WAAKD,EAAA1D,EAAA2D,cAAA,sBAAclE,EAAK2D,YAAYvB,EAAK,MACzC6B,EAAA1D,EAAA2D,cAAA,WAAKD,EAAA1D,EAAA2D,cAAA,6BAAqBlE,EAAK2D,YAAYvB,EAAK,QA3FpDpC,EAAKyC,SAAW,CACd,EACA,EACA,EACA,EACA,EACA,GAEFzC,EAAKqB,MAAQ,KAEbrB,EAAK0C,MAAQ,CACX9C,KAAM,GACNoC,MAAO,KACPI,KAAMpC,EAAKyC,UAGbzC,EAAKyB,YAnBO,OAsBZzB,EAAKyD,YAAc,IAAIlF,EACvByB,EAAKyD,YAAY3D,MAFF,gCAIfsE,QAAQC,IAAI,CAACrE,EAAKI,YAAaJ,EAAKyB,cACjC6C,KACC,SAACxB,GAAY9C,EAAKiC,UAAUjC,EAAK0C,MAAM9C,OACvC,SAAC2E,MA5BOvE,wEAoGZ,OACEiE,EAAA1D,EAAA2D,cAAA,OAAKC,UAAU,OACbF,EAAA1D,EAAA2D,cAAAxF,KAAMqF,UAAN,CAAgB3B,KAAM1D,KAAKgE,MAAMN,OACjC6B,EAAA1D,EAAA2D,cAAA,SAAOM,KAAK,OAAOC,OAAQ/F,KAAK4E,uBAxGtBoB,aCMEC,QACW,cAA7B/F,OAAOqC,SAAS2D,UAEe,UAA7BhG,OAAOqC,SAAS2D,UAEhBhG,OAAOqC,SAAS2D,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAA1D,EAAA2D,cAACc,EAAD,MAAShE,SAASiE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,KAAK,SAAAe,GACjCA,EAAaC","file":"static/js/main.cb0aa41e.chunk.js","sourcesContent":["class Text2Speech {\n  constructor() {\n    this.synth = window.speechSynthesis;\n    this.utterance = new SpeechSynthesisUtterance();\n    this.utterance.onend = () => console.log('speaking finished');\n    this.utterance.onerror = () => console.error('speaking error');\n    this.utterance.pitch = 1;\n    this.utterance.rate = 1;\n    this.utterance.volume = 1;\n    this.utterance.voice = this.synth.getVoices().find((voice) => voice.name === 'Fred');\n  }\n\n  speak(text) {\n    if (this.synth.speaking) {\n      console.error('speechSynthesis.speaking');\n      return;\n    }\n    if (!text) {\n      return;\n    }\n    this.utterance.text = text;\n    this.synth.speak(this.utterance);\n  }\n}\n\nexport default Text2Speech","import React, {Component} from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport './App.css';\nimport Text2Speech from './tools/Text2Speech';\nimport * as rp from 'request-promise-native';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.initData = [\n      0, //toxic\n      0, //severe toxic\n      0, //obscene\n      0, //threat\n      0, //insult\n      0, //identity hate\n    ];\n    this.vocab = null;\n\n    this.state = {\n      text: '',\n      model: null,\n      data: this.initData,\n    };\n\n    this.loadModel();\n\n    let greeting = 'Me Fred. Me help you unswear';\n    this.text2Speech = new Text2Speech();\n    this.text2Speech.speak(greeting);\n\n    Promise.all([this.loadVocab(), this.loadModel()])\n      .then(\n        (value) => { this.calculate(this.state.text); },\n        (reason) => {});\n  }\n\n  loadVocab = async () => {\n    let uri = document.location.href + '/vocab.json';\n\n    let options = {\n      uri: uri,\n      json: true,\n    };\n\n    this.vocab = await rp.get(options);\n\n    return;\n  }\n\n  loadModel = async () => {\n    let loadedModel = await tf.loadModel(process.env.PUBLIC_URL + '/model.json');\n    this.setState({model: loadedModel});\n\n    return;\n  }\n\n  calculate = async (text) => {\n    let data = this.initData;\n\n    if (text && this.state.model) {\n      let tensorBuffer = tf.zeros([1, 100]).buffer();\n\n      let words = text.split(' ');\n      let wordIndex = 0;\n      words.forEach((value) => {\n        if (this.vocab.hasOwnProperty(value)) {\n          tensorBuffer.set(this.vocab[value], 0, wordIndex);\n          wordIndex++;\n        }\n      });\n\n      data = await this.state.model.predict(tensorBuffer.toTensor()).data();\n    }\n\n    this.setState({data});\n  }\n\n  onChangeText = (event) => {\n    let text = event.target.value;\n    this.setState({text});\n\n    if (text) {\n      this.text2Speech.speak(text);\n      this.calculate(text.toLowerCase());\n    }\n  };\n\n  renderScore = (score) => {\n    return (Math.round(score * 1000) / 10) + '%';\n  }\n\n  ScoreList = ({data}) => {\n    return (\n      <div className=\"results\">\n        <div><span>toxic {this.renderScore(data[0])}</span></div>\n        <div><span>severe toxic {this.renderScore(data[1])}</span></div>\n        <div><span>obscene {this.renderScore(data[2])}</span></div>\n        <div><span>threat {this.renderScore(data[3])}</span></div>\n        <div><span>insult {this.renderScore(data[4])}</span></div>\n        <div><span>identity hate {this.renderScore(data[5])}</span></div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <this.ScoreList data={this.state.data} />\n        <input type='text' onBlur={this.onChangeText}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}